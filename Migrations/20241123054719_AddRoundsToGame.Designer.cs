// <auto-generated />
using BackEnd.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace backEnd.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241123054719_AddRoundsToGame")]
    partial class AddRoundsToGame
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BackEnd.Models.Classes.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnswerPoints")
                        .HasColumnType("integer");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("BackEnd.Models.Classes.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PlayersPerGroup")
                        .HasColumnType("integer");

                    b.Property<int>("RoundsAmount")
                        .HasColumnType("integer");

                    b.Property<int>("TimerForAnsweringInSec")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("BackEnd.Models.Classes.GameRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("integer");

                    b.Property<int>("RoomCode")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("GameRooms");
                });

            modelBuilder.Entity("BackEnd.Models.Classes.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int?>("RoundId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("RoundId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("BackEnd.Models.Classes.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("GameId")
                        .HasColumnType("integer");

                    b.Property<int?>("GameRoomId")
                        .HasColumnType("integer");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("GameRoomId");

                    b.HasIndex("GroupId");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Password = "1234",
                            Username = "Player1"
                        },
                        new
                        {
                            Id = 2,
                            Password = "0000",
                            Username = "Player2"
                        });
                });

            modelBuilder.Entity("BackEnd.Models.Classes.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("GameId")
                        .HasColumnType("integer");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RoundId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("RoundId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QuestionText = "Text1"
                        },
                        new
                        {
                            Id = 2,
                            QuestionText = "Text2"
                        });
                });

            modelBuilder.Entity("BackEnd.Models.Classes.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("GameId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("BackEnd.Models.Classes.Answer", b =>
                {
                    b.HasOne("BackEnd.Models.Classes.Group", null)
                        .WithMany("Answers")
                        .HasForeignKey("GroupId");

                    b.HasOne("BackEnd.Models.Classes.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("BackEnd.Models.Classes.GameRoom", b =>
                {
                    b.HasOne("BackEnd.Models.Classes.Player", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("BackEnd.Models.Classes.Group", b =>
                {
                    b.HasOne("BackEnd.Models.Classes.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Classes.Round", null)
                        .WithMany("Groups")
                        .HasForeignKey("RoundId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("BackEnd.Models.Classes.Player", b =>
                {
                    b.HasOne("BackEnd.Models.Classes.Game", null)
                        .WithMany("Players")
                        .HasForeignKey("GameId");

                    b.HasOne("BackEnd.Models.Classes.GameRoom", null)
                        .WithMany("Players")
                        .HasForeignKey("GameRoomId");

                    b.HasOne("BackEnd.Models.Classes.Group", null)
                        .WithMany("Players")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("BackEnd.Models.Classes.Question", b =>
                {
                    b.HasOne("BackEnd.Models.Classes.Game", null)
                        .WithMany("Questions")
                        .HasForeignKey("GameId");

                    b.HasOne("BackEnd.Models.Classes.Round", null)
                        .WithMany("Questions")
                        .HasForeignKey("RoundId");
                });

            modelBuilder.Entity("BackEnd.Models.Classes.Round", b =>
                {
                    b.HasOne("BackEnd.Models.Classes.Game", null)
                        .WithMany("Rounds")
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("BackEnd.Models.Classes.Game", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("Questions");

                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("BackEnd.Models.Classes.GameRoom", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("BackEnd.Models.Classes.Group", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("BackEnd.Models.Classes.Round", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
